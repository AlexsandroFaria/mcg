/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mcg.view;

import br.com.mcg.dao.PersonagemDao;
import br.com.mcg.model.NivelPersonagem;
import br.com.mcg.tabelaDeModelos.TabelaModeloNivelPersonagem;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author alafaria
 */
public class TelaNivelDesafio extends javax.swing.JFrame {

    NivelPersonagem nivelPersonagem = new NivelPersonagem();
    PersonagemDao personagemDao = new PersonagemDao();

    /**
     * Creates new form NivelDesafioMonstros
     */
    public TelaNivelDesafio() {
        initComponents();
        setIconImage(getToolkit().createImage(getClass().getResource("/icones/icone_principal.png")));
        tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btSair = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboNivelPersonagem = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaNivelPersonagem = new javax.swing.JTable();
        btInserirNivel = new javax.swing.JButton();
        btLimparLista = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        labelFacil = new javax.swing.JLabel();
        labelMedio = new javax.swing.JLabel();
        labelDificil = new javax.swing.JLabel();
        labelMortal = new javax.swing.JLabel();
        btCalcularNivelPersonagem = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtXpMonstros = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        comboNumeroMonstros = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        labelResultado = new javax.swing.JLabel();
        btCalcularXpMonstros = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        labelResultadoEncontro = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Master Control Guide - ");

        jPanel1.setBackground(new java.awt.Color(0, 51, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Multiplicadores de Encontro");

        btSair.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btSair)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btSair))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/multiplicadoresDeEncontro.PNG"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/esqueletos.png"))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setText("Nível do Personagem:");

        comboNivelPersonagem.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        comboNivelPersonagem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "1º Nível", "2º Nível", "3º Nível", "4º Nível", "5º Nível", "6º Nível", "7º Nível", "8º Nível", "9º Nível", "10º Nível", "11º Nível", "12º Nível", "13º Nível", "14º Nível", "15º Nível", "16º Nível", "17º Nível", "18º Nível", "19º Nível", "20º Nível" }));

        tabelaNivelPersonagem.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tabelaNivelPersonagem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabelaNivelPersonagem);

        btInserirNivel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btInserirNivel.setText("Inserir");
        btInserirNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserirNivelActionPerformed(evt);
            }
        });

        btLimparLista.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btLimparLista.setText("Limpar lista de Nível");
        btLimparLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparListaActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("Fácil");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel6.setText("Médio");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setText("Difícil");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setText("Mortal");

        labelFacil.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        labelMedio.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        labelDificil.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        labelMortal.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        btCalcularNivelPersonagem.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btCalcularNivelPersonagem.setText("Calcular Nível de Desafio");
        btCalcularNivelPersonagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalcularNivelPersonagemActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setText("Total XP dos Monstros:");

        txtXpMonstros.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setText("Número de Monstros:");

        comboNumeroMonstros.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        comboNumeroMonstros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar", "1", "2", "3 - 6", "7 - 10", "11 - 14", "15 ou mais" }));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel11.setText("Resultado do Encontro:");

        labelResultado.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        btCalcularXpMonstros.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btCalcularXpMonstros.setText("Calcular");
        btCalcularXpMonstros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalcularXpMonstrosActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resultado do Encontro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N

        labelResultadoEncontro.setBackground(new java.awt.Color(204, 0, 0));
        labelResultadoEncontro.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelResultadoEncontro.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelResultadoEncontro, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(labelResultadoEncontro, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(comboNivelPersonagem, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btInserirNivel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addComponent(labelDificil, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelMortal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                            .addComponent(labelFacil, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelMedio, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btCalcularNivelPersonagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btLimparLista, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtXpMonstros)
                                    .addComponent(comboNumeroMonstros, 0, 122, Short.MAX_VALUE)
                                    .addComponent(labelResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addComponent(btCalcularXpMonstros)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel5, jLabel6, jLabel7, jLabel8});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtXpMonstros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(comboNumeroMonstros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btCalcularXpMonstros))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(labelResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(comboNivelPersonagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btInserirNivel))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMortal, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelDificil, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelFacil, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelMedio, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(btCalcularNivelPersonagem)
                        .addGap(18, 18, 18)
                        .addComponent(btLimparLista)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btInserirNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserirNivelActionPerformed
        // TODO add your handling code here:
        if (comboNivelPersonagem.getSelectedItem().equals("Selecionar")) {
            JOptionPane.showMessageDialog(null, "Informe um nível!");
        } else {
            if (comboNivelPersonagem.getSelectedItem().equals("1º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(1);
                    nivelPersonagem.setNivelFacil(25);
                    nivelPersonagem.setNivelMedio(50);
                    nivelPersonagem.setNivelDificil(75);
                    nivelPersonagem.setNivelMortal(100);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("2º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(2);
                    nivelPersonagem.setNivelFacil(50);
                    nivelPersonagem.setNivelMedio(100);
                    nivelPersonagem.setNivelDificil(150);
                    nivelPersonagem.setNivelMortal(200);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("3º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(3);
                    nivelPersonagem.setNivelFacil(75);
                    nivelPersonagem.setNivelMedio(150);
                    nivelPersonagem.setNivelDificil(225);
                    nivelPersonagem.setNivelMortal(400);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("4º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(4);
                    nivelPersonagem.setNivelFacil(125);
                    nivelPersonagem.setNivelMedio(250);
                    nivelPersonagem.setNivelDificil(375);
                    nivelPersonagem.setNivelMortal(500);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("5º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(5);
                    nivelPersonagem.setNivelFacil(250);
                    nivelPersonagem.setNivelMedio(500);
                    nivelPersonagem.setNivelDificil(750);
                    nivelPersonagem.setNivelMortal(1100);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("6º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(6);
                    nivelPersonagem.setNivelFacil(300);
                    nivelPersonagem.setNivelMedio(600);
                    nivelPersonagem.setNivelDificil(900);
                    nivelPersonagem.setNivelMortal(1400);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("7º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(7);
                    nivelPersonagem.setNivelFacil(350);
                    nivelPersonagem.setNivelMedio(750);
                    nivelPersonagem.setNivelDificil(1100);
                    nivelPersonagem.setNivelMortal(1700);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("8º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(8);
                    nivelPersonagem.setNivelFacil(450);
                    nivelPersonagem.setNivelMedio(900);
                    nivelPersonagem.setNivelDificil(1440);
                    nivelPersonagem.setNivelMortal(2100);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("9º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(9);
                    nivelPersonagem.setNivelFacil(550);
                    nivelPersonagem.setNivelMedio(1100);
                    nivelPersonagem.setNivelDificil(1600);
                    nivelPersonagem.setNivelMortal(2400);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("10º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(10);
                    nivelPersonagem.setNivelFacil(600);
                    nivelPersonagem.setNivelMedio(1200);
                    nivelPersonagem.setNivelDificil(1900);
                    nivelPersonagem.setNivelMortal(2800);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("11º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(11);
                    nivelPersonagem.setNivelFacil(800);
                    nivelPersonagem.setNivelMedio(1500);
                    nivelPersonagem.setNivelDificil(2440);
                    nivelPersonagem.setNivelMortal(3600);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("12º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(12);
                    nivelPersonagem.setNivelFacil(1000);
                    nivelPersonagem.setNivelMedio(2000);
                    nivelPersonagem.setNivelDificil(3000);
                    nivelPersonagem.setNivelMortal(4500);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("13º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(13);
                    nivelPersonagem.setNivelFacil(1100);
                    nivelPersonagem.setNivelMedio(2200);
                    nivelPersonagem.setNivelDificil(3400);
                    nivelPersonagem.setNivelMortal(5100);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("14º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(14);
                    nivelPersonagem.setNivelFacil(1250);
                    nivelPersonagem.setNivelMedio(2500);
                    nivelPersonagem.setNivelDificil(3800);
                    nivelPersonagem.setNivelMortal(5700);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("15º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(15);
                    nivelPersonagem.setNivelFacil(1400);
                    nivelPersonagem.setNivelMedio(2800);
                    nivelPersonagem.setNivelDificil(4300);
                    nivelPersonagem.setNivelMortal(6500);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("16º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(16);
                    nivelPersonagem.setNivelFacil(1600);
                    nivelPersonagem.setNivelMedio(3200);
                    nivelPersonagem.setNivelDificil(4800);
                    nivelPersonagem.setNivelMortal(7200);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("17º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(17);
                    nivelPersonagem.setNivelFacil(2000);
                    nivelPersonagem.setNivelMedio(3900);
                    nivelPersonagem.setNivelDificil(5900);
                    nivelPersonagem.setNivelMortal(8800);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("18º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(18);
                    nivelPersonagem.setNivelFacil(2100);
                    nivelPersonagem.setNivelMedio(4200);
                    nivelPersonagem.setNivelDificil(6300);
                    nivelPersonagem.setNivelMortal(9500);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("19º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(19);
                    nivelPersonagem.setNivelFacil(2400);
                    nivelPersonagem.setNivelMedio(4900);
                    nivelPersonagem.setNivelDificil(7300);
                    nivelPersonagem.setNivelMortal(10900);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            } else if (comboNivelPersonagem.getSelectedItem().equals("20º Nível")) {
                try {
                    nivelPersonagem.setNivelPersonagem(20);
                    nivelPersonagem.setNivelFacil(2800);
                    nivelPersonagem.setNivelMedio(5700);
                    nivelPersonagem.setNivelDificil(8500);
                    nivelPersonagem.setNivelMortal(12700);
                    personagemDao.adicionarNivelPersonagem(nivelPersonagem);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
                tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
            }
        }
    }//GEN-LAST:event_btInserirNivelActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btSairActionPerformed

    private void btLimparListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparListaActionPerformed
        // TODO add your handling code here:
        int opcao = JOptionPane.showConfirmDialog(null, "Excluir tabela de Níveis?", "Excluir Nível de Personagem", JOptionPane.YES_NO_OPTION);
        if (opcao == 0) {
            int nivel = 0;
            personagemDao.excluirListaNivel(nivel);
            JOptionPane.showMessageDialog(null, "Lista apagada com sucesso!", "Seleção apagada", JOptionPane.INFORMATION_MESSAGE);
        }
        tabelaNivelPersonagem.setModel(new TabelaModeloNivelPersonagem(new PersonagemDao().listarNivelPersonagem()));
        limparTela();
    }//GEN-LAST:event_btLimparListaActionPerformed

    private void btCalcularNivelPersonagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalcularNivelPersonagemActionPerformed
        // TODO add your handling code here:
        labelFacil.setText(calculaNivelFacil());
        labelMedio.setText(calculaNivelMedio());
        labelDificil.setText(calculaNivelDificil());
        labelMortal.setText(calculaNivelMortal());

        comboNivelPersonagem.setSelectedItem("Selecionar");
    }//GEN-LAST:event_btCalcularNivelPersonagemActionPerformed

    private void btCalcularXpMonstrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalcularXpMonstrosActionPerformed
        // TODO add your handling code here:
        double resultado = 0.0;
        double xp = 0.0;
        if (txtXpMonstros.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Favor informar Xp dos Monstros!","Atenção", JOptionPane.WARNING_MESSAGE);
        } else if (comboNumeroMonstros.getSelectedItem().equals("Selecionar")) {
            JOptionPane.showMessageDialog(null, "Informe um valor válido!","Atenção", JOptionPane.WARNING_MESSAGE);
        } else if (comboNumeroMonstros.getSelectedItem().equals("1")) {
            xp = Integer.parseInt(txtXpMonstros.getText());
            resultado = xp * 1.0;
            labelResultado.setText(Integer.toString((int) resultado));
        } else if (comboNumeroMonstros.getSelectedItem().equals("2")) {
            xp = Integer.parseInt(txtXpMonstros.getText());
            resultado = xp * 1.5;
            labelResultado.setText(Integer.toString((int) resultado));
        } else if (comboNumeroMonstros.getSelectedItem().equals("3 - 6")) {
            xp = Integer.parseInt(txtXpMonstros.getText());
            resultado = xp * 2;
            labelResultado.setText(Integer.toString((int) resultado));
        } else if (comboNumeroMonstros.getSelectedItem().equals("7 - 10")) {
            xp = Integer.parseInt(txtXpMonstros.getText());
            resultado = xp * 2.5;
            labelResultado.setText(Integer.toString((int) resultado));
        } else if (comboNumeroMonstros.getSelectedItem().equals("11 - 14")) {
            xp = Integer.parseInt(txtXpMonstros.getText());
            resultado = xp * 3;
            labelResultado.setText(Integer.toString((int) resultado));
        } else if (comboNumeroMonstros.getSelectedItem().equals("15 ou mais")) {
            xp = Integer.parseInt(txtXpMonstros.getText());
            resultado = xp * 4;
            labelResultado.setText(Integer.toString((int) resultado));
        }
        calculaDificuldadeDeEncontro();
        
        txtXpMonstros.setText("");
        comboNumeroMonstros.setSelectedItem("Selecionar");
    }//GEN-LAST:event_btCalcularXpMonstrosActionPerformed

    public String calculaNivelFacil() {
        Double facil = 0.0;
        DecimalFormat dc = new DecimalFormat("#########");
        for (int i = 0; i <= tabelaNivelPersonagem.getRowCount() - 1; i++) {
            facil += Integer.parseInt(tabelaNivelPersonagem.getValueAt(i, 1).toString());
        }
        return dc.format(facil);
    }

    public String calculaNivelMedio() {
        Double medio = 0.0;
        DecimalFormat dc = new DecimalFormat("#########");
        for (int i = 0; i <= tabelaNivelPersonagem.getRowCount() - 1; i++) {
            medio += Integer.parseInt(tabelaNivelPersonagem.getValueAt(i, 2).toString());
        }
        return dc.format(medio);
    }

    public String calculaNivelDificil() {
        Double dificil = 0.0;
        DecimalFormat dc = new DecimalFormat("#########");
        for (int i = 0; i <= tabelaNivelPersonagem.getRowCount() - 1; i++) {
            dificil += Integer.parseInt(tabelaNivelPersonagem.getValueAt(i, 3).toString());
        }
        return dc.format(dificil);
    }

    public String calculaNivelMortal() {
        Double mortal = 0.0;
        DecimalFormat dc = new DecimalFormat("#########");
        for (int i = 0; i <= tabelaNivelPersonagem.getRowCount() - 1; i++) {
            mortal += Integer.parseInt(tabelaNivelPersonagem.getValueAt(i, 4).toString());
        }
        return dc.format(mortal);
    }

    public void calculaDificuldadeDeEncontro(){
        
        if(labelFacil.getText().equals("") || labelMedio.getText().equals("") || labelDificil.getText().equals("") || labelMortal.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Recalcule o vível dos Personagens!","Atenção", JOptionPane.WARNING_MESSAGE);
        }
        
        int resultado = Integer.parseInt(labelResultado.getText());
        int facil = Integer.parseInt(labelFacil.getText());
        int medio = Integer.parseInt(labelMedio.getText());
        int dificil = Integer.parseInt(labelDificil.getText());
        int mortal = Integer.parseInt(labelMortal.getText());
        
        if(resultado <= facil){// || resultado <= medio || resultado <= dificil || resultado <= mortal){
            labelResultadoEncontro.setText("Nível de dificuldade fácil!");
        }else if(resultado <= medio){
            labelResultadoEncontro.setText("Nível de dificuldade média!");
        }else if(resultado <= dificil){
            labelResultadoEncontro.setText("Nível de dificuldade Difícil!");
        }else if(resultado <= mortal){
            labelResultadoEncontro.setText("Nível de dificuldade Mortal!");
        } else{
            labelResultadoEncontro.setText("Nível Surreal. Os aventureiros Morrerão");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaNivelDesafio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaNivelDesafio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaNivelDesafio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaNivelDesafio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaNivelDesafio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCalcularNivelPersonagem;
    private javax.swing.JButton btCalcularXpMonstros;
    private javax.swing.JButton btInserirNivel;
    private javax.swing.JButton btLimparLista;
    private javax.swing.JButton btSair;
    private javax.swing.JComboBox<String> comboNivelPersonagem;
    private javax.swing.JComboBox<String> comboNumeroMonstros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelDificil;
    private javax.swing.JLabel labelFacil;
    private javax.swing.JLabel labelMedio;
    private javax.swing.JLabel labelMortal;
    private javax.swing.JLabel labelResultado;
    private javax.swing.JLabel labelResultadoEncontro;
    private javax.swing.JTable tabelaNivelPersonagem;
    private javax.swing.JTextField txtXpMonstros;
    // End of variables declaration//GEN-END:variables

    private void limparTela() {
        labelFacil.setText("");
        labelMedio.setText("");
        labelDificil.setText("");
        labelMortal.setText("");
        comboNivelPersonagem.setSelectedItem("Selecionar");
    }
}
